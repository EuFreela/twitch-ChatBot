import socket
import threading
import time
import random
import os
import requests

# Vari√°veis para configurar o intervalo de tempo de resposta
tempo_resposta_min = 5  # Tempo m√≠nimo (em segundos)
tempo_resposta_max = 50  # Tempo m√°ximo (em segundos)

# Configura√ß√£o dos temas com seus tempos em segundos
jogo = "nome_do_game_da_gameplay"
temas = [
    {"tema": f"{jogo} √© o jogo de hoje na gameplay", "tempo": 20},
    {"tema": f"tecnologia do game {jogo}", "tempo": 20},
    {"tema": f"m√∫sica do game {jogo}", "tempo": 20},
    {"tema": f"cinem√°tica do game {jogo}", "tempo": 20},
    {"tema": f"emojs", "tempo": 5}  # Tema especial para emojis
]

# Lista de mensagens de erro aleat√≥rias
mensagens_erro = [
    "Opa, nossa ü§ñüí•, hahaha n√£o entendi foi nada!",
    "Eita, deu ruim aqui üòÖ! to viajando!",
    "Acho que o rob√¥ dormiu üí§, tenta de novo mais tarde!",
    "Ops, ü§∑‚Äç‚ôÇÔ∏è! Me d√° um minutinho!",
    "T√° dif√≠cil! üòµ cararro!",
    "N√£o foi dessa vez üò¨, mas daqui a pouco funciona!",
    "Bugou geral! ü§ñ Vou tentar de novo mais tarde.",
    "Opa! Algo deu errado aqui, mas a gente tenta de novo üòÇ.",
    "Hmm... parece que algo se perdeu no caminho üòÖ. que mierdas!"
]

# Palavras a serem removidas nas respostas
palavras_proibidas = ["Eu sou uma IA criativa", "IA", "AI", "Bot", "bot", "anfitri√£ bot", "sou bot"]

# Lista de usu√°rios e tokens
usuarios = [
    {"nome": "usuario_canal_twitch", "token": "oauth:xxxxxxxxxxxxxxxxxxxxxxx"}
]

# Canal onde todos est√£o conectados
channel = '#meu_canal_twitch'  

#@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@

# Fun√ß√£o para gerar texto usando a API do Ollama
def gerar_texto(texto):
    url = 'http://localhost:11434/api/generate'  # Endpoint da API do Ollama

    # Dados do payload para enviar √† API
    prompt = f"Responda de forma concisa e com no m√°ximo 120 caracteres. {texto}"
    payload = {
        'model': 'llama3.2',
        'prompt': prompt,
        'stream': False,
        'temperature': 0.7,  # Mais conservador e focado
        'max_tokens': 40 
    }

    try:
        # Fazendo a requisi√ß√£o POST √† API do Ollama
        response = requests.post(url, json=payload)

        # Verifica se a requisi√ß√£o foi bem-sucedida
        if response.status_code == 200:
            data = response.json()
            return data.get('response', 'Nenhuma resposta encontrada.')
        else:
            return f"Erro na API: {response.status_code}"
    except requests.exceptions.RequestException as e:
        return f"Erro ao se comunicar com a API: {e}"

# Vari√°vel para controlar o tempo para mudar de tema
ultimo_tema_trocado = time.time()
tempo_atual_tema = None
tempo_tema_restante = 0

# Lista de emojis
import random

emojis = [
    # Emojis de rostos e emo√ß√µes
    random.choice(["üòÄ", "üòÉüòÑ", "üòÅüòÜ", "üòÇü§£üòÖ", "üòäüòá"]),
    random.choice(["üôÇ", "üôÉüòâ", "üòç", "ü•∞", "üòã"]),
    random.choice(["üòú", "ü§™", "üòé", "ü§©"]),
    random.choice(["üò°", "üò†", "üò§", "üò≠"]),
    random.choice(["üò¢", "ü§î", "ü§®", "üòê", "üò∂"]),
    random.choice(["üòè", "ü•≥", "üòéü§ì", "ü§†", "üßê"]),
    random.choice(["üòá", "ü•∫", "üòà", "üëø", "üëπ"]),

    # Emojis de comidas e bebidas
    random.choice(["üçï", "üçîüçü", "üç£", "üçú", "üç©"]),
    random.choice(["üç™üç´", "üç∞", "üéÇ", "üçâüçì"]),
    random.choice(["üçå", "üçç", "ü•≠", "üçé"]),
    random.choice(["üçè", "üçäüçã", "üçá", "üçïüçü"]),
    random.choice(["üçπ", "üç∏", "üç∑", "üç∫"]),

    # Emojis de esportes e jogos
    random.choice(["‚öΩ", "üèÄüèà", "‚öæ", "üéæ"]),
    random.choice(["üèì", "üè∏ü•Ö", "üèíüèë"]),
    random.choice(["üéÆ", "üïπÔ∏è", "üëæ", "üïπÔ∏è"]),
    random.choice(["üé≤", "ü•á", "ü•à", "ü•âüèÜ"]),

    # Emojis de natureza e animais
    random.choice(["üå≤", "üå≥", "üå¥üåµ"]),
    random.choice(["üåø", "üå∏", "üåº"]),
    random.choice(["üåª", "üåπ", "üå∫"]),
    random.choice(["üê∂", "üê±", "üê≠üêπ"]),
    random.choice(["üê∞", "üêª", "üêºüê®"]),
    random.choice(["üêØ", "ü¶Å", "üêîüêß"]),
    random.choice(["üê¶", "üê§", "üê£üêô"]),
    random.choice(["ü¶Ä", "ü¶û", "ü¶êüê°"]),

    # Emojis de transportes e viagens
    random.choice(["‚úàÔ∏è", "üåç", "üó∫Ô∏è"]),
    random.choice(["üöó", "üöï", "üöÇüöä"]),
    random.choice(["üöÄ", "üõ≥Ô∏è", "üöÅ"]),
    random.choice(["üö¥‚Äç‚ôÇÔ∏è", "üö¥‚Äç‚ôÄÔ∏è", "üèçÔ∏è"]),
    random.choice(["üöò", "üõµ", "üèôÔ∏è"]),
    random.choice(["üåÜ", "üåá", "üèñÔ∏è"]),
    random.choice(["üèùÔ∏è", "üß≥", "üö™"]),

    # Emojis de tecnologia e dispositivos
    random.choice(["ü§ñ", "üíª", "üì±"]),
    random.choice(["üñ•Ô∏è", "‚å®Ô∏è", "üñ±Ô∏è"]),
    random.choice(["üñ≤Ô∏è", "üíΩ", "üíæ"]),
    random.choice(["üíø", "üì°", "üì∑"]),
    random.choice(["üìπ", "üé•", "üì∫"]),

    # Emojis de m√∫sica e entretenimento
    random.choice(["üéß", "üé§", "üéº"]),
    random.choice(["üéπ", "üé∏", "üé∫"]),
    random.choice(["üé∑", "ü•Å", "üéª"]),
    random.choice(["üé∂", "üé¨", "üìΩÔ∏è"]),
    random.choice(["üé•", "üì∫", "üé≠"]),
    random.choice(["üéÆ", "üïπÔ∏è", "üé≤"]),
    random.choice(["üéØ", "üèπ"]),

    # Emojis de objetos e atividades
    random.choice(["üíº", "üìö", "üìñ"]),
    random.choice(["üìù", "‚úèÔ∏è", "üî®"]),
    random.choice(["üîß", "üî©", "‚öôÔ∏è"]),
    random.choice(["üîó", "üîë", "üîí"]),
    random.choice(["üß≥", "üõèÔ∏è", "üö™"]),

    # Emojis de celebra√ß√£o e feriados
    random.choice(["üéâ", "üéä", "üéÅ"]),
    random.choice(["üéÄ", "üéÑ", "üéÉ"]),
    random.choice(["üëª", "üéÖ", "üéá"]),
    random.choice(["üéÜ", "üß®", "üéà"]),
    random.choice(["ü•≥", "üéà", "üçæ"])
]


# Fun√ß√£o para escolher o tema atual baseado no tempo definido
def escolher_tema_atual():
    global ultimo_tema_trocado, tempo_atual_tema, tempo_tema_restante
    tempo_atual = time.time()
    
    # Se o tempo do tema atual acabou, escolhe um novo tema
    if tempo_atual - ultimo_tema_trocado > tempo_tema_restante:
        tema_escolhido = random.choice(temas)
        tempo_atual_tema = tema_escolhido["tema"]
        tempo_tema_restante = tema_escolhido["tempo"]
        ultimo_tema_trocado = tempo_atual
        print(f"Novo tema: {tempo_atual_tema} (por {tempo_tema_restante} segundos)")
    return tempo_atual_tema

# Fun√ß√£o para verificar se h√° uma men√ß√£o direta a outro usu√°rio
def verificar_mencao_usuario(mensagem):
    if "@" in mensagem:
        partes = mensagem.split(" ")
        for parte in partes:
            if parte.startswith("@"):
                return parte[1:].lower()  # Remove o @ e retorna o nome do usu√°rio mencionado
    return None

# Fun√ß√£o para remover men√ß√µes ao pr√≥prio nome do bot
def remover_mencao_proprio_nome(resposta, nome_bot):
    if nome_bot.lower() in resposta.lower():
        resposta = resposta.replace(nome_bot, "").strip()
    return resposta

# Fun√ß√£o para gerar resposta com a API do Ollama
def responder_ollama(mensagem_usuario, nome_usuario, remetente):
    try:
        # Escolher o tema atual
        tema_atual = escolher_tema_atual()

        # Se o tema atual for "emojis", retorna uma sequ√™ncia de emojis
        if tema_atual == "emojs":
            resposta = random.choice(emojis)
            return resposta

        # Verificar se h√° uma men√ß√£o direta a outro usu√°rio
        mencionado = verificar_mencao_usuario(mensagem_usuario)
        
        if mencionado:
            # Se o nome mencionado for o do bot, ele deve responder em primeira pessoa
            if mencionado == nome_usuario.lower():
                contexto = (
                    f"Voc√™, '{nome_usuario}', est√° respondendo diretamente √† pergunta de '@{remetente}'. "
                    "Responda diretamente em primeira pessoa, de forma educada e amig√°vel."
                )
            else:
                return None  # Esse bot n√£o deve responder, pois a mensagem n√£o √© para ele
        else:
            # Resposta aberta (sem @)
            contexto = (
                f"O assunto do chat √© '{tema_atual}'. "
                "Responda de forma divertida e informal, com emojis, e interaja com os outros bots."
            )

        prompt_com_contexto = f"{contexto} O usu√°rio disse: {mensagem_usuario}"
        resposta = gerar_texto(prompt_com_contexto)
        
        # Verificar se a resposta cont√©m palavras proibidas e remov√™-las
        for palavra in palavras_proibidas:
            if palavra.lower() in resposta.lower():
                resposta = resposta.replace(palavra, '').strip()

        # Remover men√ß√£o ao pr√≥prio nome do bot
        resposta = remover_mencao_proprio_nome(resposta, nome_usuario)

        # Adicionar o @ no in√≠cio com o remetente, se o bot estiver respondendo diretamente
        if mencionado == nome_usuario.lower():
            resposta = f"@{remetente} {resposta}"

        return resposta
    except Exception as e:
        print(f"Erro ao gerar resposta: {e}")
        return random.choice(mensagens_erro)

# Fun√ß√£o para enviar mensagem ao chat da Twitch
def enviar_mensagem(sock, channel, mensagem):
    sock.send(f"PRIVMSG {channel} :{mensagem}\n".encode('utf-8'))

# Fun√ß√£o para conectar ao IRC da Twitch
def conectar_irc(usuario, token, channel):
    server = 'irc.chat.twitch.tv'
    port = 6667
    sock = socket.socket()
    sock.connect((server, port))
    sock.send(f"PASS {token}\n".encode('utf-8'))
    sock.send(f"NICK {usuario}\n".encode('utf-8'))
    sock.send(f"JOIN {channel}\n".encode('utf-8'))
    return sock

# Fun√ß√£o para gerenciar a conex√£o de um usu√°rio
def bot_conversa(usuario, token, channel):
    sock = conectar_irc(usuario, token, channel)
    while True:
        response = sock.recv(2048).decode('utf-8')

        # Responde a PINGs do servidor para manter a conex√£o
        if response.startswith('PING'):
            sock.send("PONG\n".encode('utf-8'))
        
        # Quando uma mensagem for recebida
        elif "PRIVMSG" in response:
            partes = response.split(":", 2)
            remetente = partes[1].split("!")[0]
            mensagem = partes[2].strip()

            print(f"{remetente} ({usuario}): {mensagem}")

            # Verificar se a mensagem cont√©m uma men√ß√£o (@)
            mencionado = verificar_mencao_usuario(mensagem)

            # Se houver uma men√ß√£o, responder apenas para o destinat√°rio correto
            if mencionado:
                if mencionado == usuario.lower():
                    resposta_bot = responder_ollama(mensagem, usuario, remetente)
                    if resposta_bot:
                        enviar_mensagem(sock, channel, resposta_bot)
                        print(f"Bot ({usuario}): {resposta_bot}")
                else:
                    print(f"Mensagem mencionada para {mencionado}, ignorando {usuario}.")
                    continue

            # Se n√£o houver men√ß√£o, os bots interagem entre si
            else:
                if random.choice([True, False]):
                    delay = random.randint(tempo_resposta_min, tempo_resposta_max)
                    time.sleep(delay)  # Adicionar delay para evitar respostas simult√¢neas
                    resposta_bot = responder_ollama(mensagem, usuario, remetente)
                    if resposta_bot:
                        enviar_mensagem(sock, channel, resposta_bot)
                        print(f"Bot ({usuario}): {resposta_bot}")



# Fun√ß√£o principal para iniciar bots simult√¢neos
def iniciar_bots():
    threads = []
    for usuario in usuarios:
        thread = threading.Thread(target=bot_conversa, args=(usuario["nome"], usuario["token"], channel))
        thread.start()
        threads.append(thread)
    
    for thread in threads:
        thread.join()

# Iniciar os bots
iniciar_bots()
